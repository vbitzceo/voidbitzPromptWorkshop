// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VoidBitzPromptWorkshop.API.Data;

#nullable disable

namespace VoidBitzPromptWorkshop.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250611204147_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("VoidBitzPromptWorkshop.API.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "cat-web",
                            Color = "#3B82F6",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Prompts for web development tasks",
                            Name = "Web Development"
                        },
                        new
                        {
                            Id = "cat-content",
                            Color = "#10B981",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Prompts for content creation and writing",
                            Name = "Content Creation"
                        });
                });

            modelBuilder.Entity("VoidBitzPromptWorkshop.API.Models.PromptExecution", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PromptTemplateId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Variables")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PromptTemplateId");

                    b.ToTable("PromptExecutions");
                });

            modelBuilder.Entity("VoidBitzPromptWorkshop.API.Models.PromptTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Variables")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("YamlTemplate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("PromptTemplates");

                    b.HasData(
                        new
                        {
                            Id = "prompt-1",
                            CategoryId = "cat-web",
                            Content = "Please review the following {{language}} code and provide constructive feedback:\n\n{{code}}\n\nFocus on:\n- Code quality\n- Best practices\n- Performance\n- Security",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Reviews code and provides feedback",
                            Name = "Code Review Assistant",
                            Tags = "[\"tag-zero-shot\",\"tag-chain-of-thought\"]",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Variables = "[{\"Name\":\"language\",\"Description\":\"Programming language\",\"Type\":\"string\",\"Required\":true,\"DefaultValue\":null},{\"Name\":\"code\",\"Description\":\"Code to review\",\"Type\":\"string\",\"Required\":true,\"DefaultValue\":null}]",
                            YamlTemplate = ""
                        },
                        new
                        {
                            Id = "prompt-2",
                            CategoryId = "cat-content",
                            Content = "Write a {{word_count}} word blog post about {{topic}}.\n\nTarget audience: {{audience}}\nTone: {{tone}}\n\nInclude:\n- Engaging introduction\n- {{sections}} main sections\n- Conclusion with call-to-action",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Generates blog post content",
                            Name = "Blog Post Generator",
                            Tags = "[\"tag-few-shot\",\"tag-zero-shot\"]",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Variables = "[{\"Name\":\"topic\",\"Description\":\"Blog post topic\",\"Type\":\"string\",\"Required\":true,\"DefaultValue\":null},{\"Name\":\"word_count\",\"Description\":\"Target word count\",\"Type\":\"number\",\"Required\":true,\"DefaultValue\":\"800\"},{\"Name\":\"audience\",\"Description\":\"Target audience\",\"Type\":\"string\",\"Required\":true,\"DefaultValue\":\"General\"},{\"Name\":\"tone\",\"Description\":\"Writing tone\",\"Type\":\"string\",\"Required\":false,\"DefaultValue\":\"Professional\"},{\"Name\":\"sections\",\"Description\":\"Number of main sections\",\"Type\":\"number\",\"Required\":false,\"DefaultValue\":\"3\"}]",
                            YamlTemplate = ""
                        });
                });

            modelBuilder.Entity("VoidBitzPromptWorkshop.API.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "tag-zero-shot",
                            Color = "#3B82F6",
                            Description = "Direct prompts without examples or additional context - ideal for idea generation, summarization, and translation",
                            Name = "Zero-Shot"
                        },
                        new
                        {
                            Id = "tag-few-shot",
                            Color = "#10B981",
                            Description = "Prompts with one or more examples to help the model understand the desired input-output pairs",
                            Name = "Few-Shot"
                        },
                        new
                        {
                            Id = "tag-chain-of-thought",
                            Color = "#F59E0B",
                            Description = "Encourages the model to break down complex reasoning into intermediate steps for better structured output",
                            Name = "Chain of Thought"
                        },
                        new
                        {
                            Id = "tag-zero-shot-cot",
                            Color = "#8B5CF6",
                            Description = "Combines chain of thought with zero-shot prompting for better reasoning without examples",
                            Name = "Zero-Shot CoT"
                        });
                });

            modelBuilder.Entity("VoidBitzPromptWorkshop.API.Models.PromptExecution", b =>
                {
                    b.HasOne("VoidBitzPromptWorkshop.API.Models.PromptTemplate", "PromptTemplate")
                        .WithMany()
                        .HasForeignKey("PromptTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromptTemplate");
                });

            modelBuilder.Entity("VoidBitzPromptWorkshop.API.Models.PromptTemplate", b =>
                {
                    b.HasOne("VoidBitzPromptWorkshop.API.Models.Category", "Category")
                        .WithMany("PromptTemplates")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VoidBitzPromptWorkshop.API.Models.Category", b =>
                {
                    b.Navigation("PromptTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
